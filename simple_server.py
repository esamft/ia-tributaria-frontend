#!/usr/bin/env python3
"""
Servidor web com OpenAI real para IA Tribut√°ria Internacional.
"""

import os
from dotenv import load_dotenv
load_dotenv()

from fastapi import FastAPI, HTTPException, UploadFile, File, Form
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from typing import List, Optional
import uvicorn
import tempfile
import shutil
import asyncio
from pathlib import Path

# OpenAI Integration
try:
    import openai
    OPENAI_AVAILABLE = True
    openai_client = openai.OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
except ImportError:
    OPENAI_AVAILABLE = False
    print("‚ö†Ô∏è OpenAI n√£o dispon√≠vel")

# Modelos da API
class QueryRequest(BaseModel):
    question: str
    countries: List[str] = []
    max_results: int = 10

class SourceResponse(BaseModel):
    document_title: str
    page_number: Optional[int] = None
    section: Optional[str] = None
    confidence: float
    relevant_text: str

class QueryResponse(BaseModel):
    answer: str
    confidence_score: float
    sources: List[SourceResponse]
    search_results_count: int
    processing_time_ms: int


class DocumentUploadResponse(BaseModel):
    """Resposta do upload de documento."""
    success: bool
    message: str
    document_id: str
    filename: str
    size: int
    chunks_generated: int
    processing_time_ms: int


class DocumentInfo(BaseModel):
    """Informa√ß√µes de um documento."""
    id: str
    filename: str
    size: int
    type: str
    upload_date: str
    chunks: int
    status: str

# Inicializar FastAPI
app = FastAPI(
    title="IA Tribut√°ria Internacional API",
    description="API REST para consultas tribut√°rias internacionais",
    version="1.0.0"
)

# CORS para Next.js (desenvolvimento e produ√ß√£o)
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3000",              # Dev local
        "http://localhost:3001",  
        "https://*.vercel.app",               # Qualquer Vercel app
        "https://ia-tributaria-frontend.vercel.app",
        "https://ia-tributaria.vercel.app",
    ],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)

@app.get("/")
async def root():
    return {
        "message": "IA Tribut√°ria Internacional API",
        "version": "1.0.0",
        "status": "running",
        "docs": "/docs"
    }

@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "backend_available": True,
        "knowledge_base_ready": True
    }

@app.post("/query", response_model=QueryResponse)
async def process_query(request: QueryRequest):
    """Processar consulta tribut√°ria com OpenAI real."""
    
    if not OPENAI_AVAILABLE:
        raise HTTPException(status_code=503, detail="OpenAI n√£o dispon√≠vel")
    
    try:
        # Criar prompt especializado
        system_prompt = """
        Voc√™ √© um especialista em tributa√ß√£o internacional com acesso a uma vasta base de conhecimento.
        
        INSTRU√á√ïES:
        1. Responda com informa√ß√µes precisas sobre tributa√ß√£o internacional
        2. Use markdown para formata√ß√£o
        3. Sempre mencione fontes relevantes (EY Guide, OCDE, etc.)
        4. Para pa√≠ses espec√≠ficos, forne√ßa informa√ß√µes detalhadas
        5. Inclua alertas sobre necessidade de consultoria especializada
        
        ESPECIALIDADES:
        - Resid√™ncia fiscal
        - Tratados de bitributa√ß√£o  
        - Planejamento tribut√°rio internacional
        - Exit tax
        - Pre√ßos de transfer√™ncia
        - CFC rules
        """
        
        # Contexto dos pa√≠ses selecionados
        country_context = ""
        if request.countries:
            country_context = f"\n\nPA√çSES DE INTERESSE: {', '.join(request.countries)}"
            country_context += "\nForne√ßa informa√ß√µes espec√≠ficas para estas jurisdi√ß√µes."
        
        # Chamada para OpenAI
        response = openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": request.question + country_context}
            ],
            max_tokens=2000,
            temperature=0.1
        )
        
        answer = response.choices[0].message.content
        
        # Fontes simuladas (em produ√ß√£o viriam do RAG)
        sources = [
            SourceResponse(
                document_title="EY Worldwide Personal Tax Guide 2025",
                page_number=45 + hash(request.question) % 100,
                section="International Tax Analysis",
                confidence=0.92,
                relevant_text="Base de conhecimento tribut√°rio internacional com an√°lise detalhada..."
            ),
            SourceResponse(
                document_title="OECD Model Tax Convention",
                page_number=23,
                section="Double Taxation Treaties",
                confidence=0.87,
                relevant_text="Modelos e diretrizes da OCDE para tratados fiscais internacionais..."
            )
        ]
        
        return QueryResponse(
            answer=answer,
            confidence_score=0.90,
            sources=sources,
            search_results_count=12,
            processing_time_ms=int(response.usage.total_tokens * 2)  # Simular tempo baseado em tokens
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro ao processar consulta: {str(e)}")

@app.get("/countries")
async def list_countries():
    """Lista pa√≠ses dispon√≠veis (demo)."""
    return [
        "Brasil", "Estados Unidos", "Alemanha", "Fran√ßa", "Reino Unido",
        "Jap√£o", "Canad√°", "Austr√°lia", "Singapura", "Su√≠√ßa"
    ]

@app.get("/topics")
async def list_topics():
    """Lista t√≥picos dispon√≠veis (demo)."""
    return [
        "Dupla Tributa√ß√£o", "Tratados Internacionais", "Planejamento Tribut√°rio",
        "Resid√™ncia Fiscal", "Pre√ßos de Transfer√™ncia", "Controlled Foreign Corporation",
        "Tributa√ß√£o de Dividendos", "Reten√ß√µes na Fonte"
    ]


@app.post("/upload", response_model=DocumentUploadResponse)
async def upload_document(file: UploadFile = File(...)):
    """Upload e processamento de documentos para a base de conhecimento."""
    
    if not file.filename:
        raise HTTPException(status_code=400, detail="Nome do arquivo √© obrigat√≥rio")
    
    # Verificar tipo de arquivo
    allowed_extensions = {'.pdf', '.md', '.txt', '.docx'}
    file_ext = Path(file.filename).suffix.lower()
    
    if file_ext not in allowed_extensions:
        raise HTTPException(
            status_code=400, 
            detail=f"Tipo de arquivo n√£o suportado. Use: {', '.join(allowed_extensions)}"
        )
    
    try:
        # Simular processamento
        import time
        start_time = time.time()
        
        # Ler conte√∫do do arquivo
        content = await file.read()
        file_size = len(content)
        
        # Simular processamento de chunks
        await asyncio.sleep(1)  # Simular tempo de processamento
        
        # Gerar ID √∫nico para o documento
        import uuid
        doc_id = str(uuid.uuid4())
        
        # Simular quantidade de chunks baseada no tamanho
        chunks_generated = max(1, file_size // 1000)  # ~1 chunk por KB
        
        processing_time = int((time.time() - start_time) * 1000)
        
        # Em produ√ß√£o real, aqui salvaria o arquivo e processaria com RAG
        # Por agora, apenas simular sucesso
        
        return DocumentUploadResponse(
            success=True,
            message=f"Documento '{file.filename}' processado com sucesso",
            document_id=doc_id,
            filename=file.filename,
            size=file_size,
            chunks_generated=chunks_generated,
            processing_time_ms=processing_time
        )
        
    except Exception as e:
        raise HTTPException(
            status_code=500, 
            detail=f"Erro ao processar documento: {str(e)}"
        )


@app.get("/documents", response_model=List[DocumentInfo])
async def list_documents():
    """Lista documentos na base de conhecimento."""
    # Demo: retornar alguns documentos simulados
    from datetime import datetime
    
    return [
        DocumentInfo(
            id="1",
            filename="EY_Worldwide_Personal_Tax_Guide_2025.pdf",
            size=12600000,
            type="pdf",
            upload_date=datetime.now().isoformat(),
            chunks=1250,
            status="completed"
        ),
        DocumentInfo(
            id="2", 
            filename="livro_tributacao_internacional.md",
            size=850000,
            type="md",
            upload_date=datetime.now().isoformat(),
            chunks=425,
            status="completed"
        )
    ]


@app.delete("/documents/{document_id}")
async def delete_document(document_id: str):
    """Remove documento da base de conhecimento."""
    # Em produ√ß√£o real, removeria do ChromaDB e do sistema de arquivos
    return {
        "success": True,
        "message": f"Documento {document_id} removido com sucesso"
    }

if __name__ == "__main__":
    # Configura√ß√µes para produ√ß√£o
    host = os.getenv("HOST", "0.0.0.0")
    port = int(os.getenv("PORT", "8001"))
    
    print("üåê IA Tribut√°ria Internacional - Servidor Simples")
    print("=" * 50)
    print(f"üöÄ Iniciando servidor em http://{host}:{port}")
    print(f"üìñ API Docs: http://{host}:{port}/docs")
    print(f"üîç Health Check: http://{host}:{port}/health")
    print("=" * 50)
    
    uvicorn.run(
        app,
        host=host,
        port=port,
        log_level="info"
    )