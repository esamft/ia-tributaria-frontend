#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Sistema Completo de Agentes Tribut√°rios usando Agno Framework
üéØ RESPOSTA √Ä PERGUNTA: "Como funciona a resid√™ncia fiscal no Uruguai?"
"""

import os
from dotenv import load_dotenv
load_dotenv()

# Verificar se temos as chaves necess√°rias
if not os.getenv('OPENAI_API_KEY'):
    print("‚ùå OPENAI_API_KEY n√£o encontrada no .env")
    print("Por favor, configure sua chave da OpenAI")
    exit(1)

from agno.agent import Agent
from agno.models.openai import OpenAIChat
import chromadb
import json
from typing import Dict, List, Any

class SistemaRealAgentes:
    """Sistema real de agentes especializados em tributa√ß√£o"""
    
    def __init__(self):
        self.setup_chromadb()
        self.criar_agentes()
    
    def setup_chromadb(self):
        """Conecta ao ChromaDB com dados reais"""
        try:
            chromadb_path = "/Users/esausamuellimafeitosa/meus-projetos-claude/projetos-python/sistema-agentes-tributarios/data/chromadb"
            client = chromadb.PersistentClient(path=chromadb_path)
            self.collection = client.get_collection("tributacao_internacional_rag")
            
            # Testar conex√£o
            count = self.collection.count()
            print(f"‚úÖ ChromaDB conectado: {count} documentos na base")
            
        except Exception as e:
            print(f"‚ö†Ô∏è ChromaDB n√£o dispon√≠vel: {e}")
            self.collection = None
    
    def buscar_documentos(self, query: str, n_results: int = 5) -> List[Dict]:
        """Busca documentos na base real"""
        if not self.collection:
            return []
        
        try:
            results = self.collection.query(
                query_texts=[query],
                n_results=n_results,
                include=['documents', 'metadatas', 'distances']
            )
            
            documentos = []
            if results['documents'] and results['documents'][0]:
                for i, doc in enumerate(results['documents'][0]):
                    metadata = results['metadatas'][0][i] if results['metadatas'] else {}
                    distance = results['distances'][0][i] if results['distances'] else 1.0
                    
                    documentos.append({
                        "conteudo": doc[:500] + "..." if len(doc) > 500 else doc,
                        "fonte": metadata.get('source_document', 'Desconhecida'),
                        "relevancia": round(1 - distance, 3),
                        "confidence": metadata.get('confidence', 0.8)
                    })
            
            return documentos
            
        except Exception as e:
            print(f"Erro na busca: {e}")
            return []
    
    def criar_agentes(self):
        """Cria agentes especializados"""
        
        # Agente Pesquisador - Busca na base real
        self.pesquisador = Agent(
            name="Pesquisador RAG",
            model=OpenAIChat(id="gpt-4o"),
            description="""Especialista em pesquisa na base de conhecimento tribut√°ria.
            Acesso a 4.317 chunks de documentos especializados.""",
            instructions="""
            Voc√™ √© um pesquisador especializado em tributa√ß√£o internacional.
            
            MISS√ÉO: Buscar informa√ß√µes ESPEC√çFICAS na base de dados para responder perguntas tribut√°rias.
            
            PROCESSO:
            1. Analise a pergunta do usu√°rio
            2. Execute busca na base usando termos relevantes
            3. Avalie a relev√¢ncia dos resultados encontrados
            4. Extraia informa√ß√µes precisas e espec√≠ficas
            5. Cite sempre as fontes encontradas
            
            RESPONDA SEMPRE:
            - Com informa√ß√µes ESPEC√çFICAS encontradas na base
            - Citando as fontes (documento + relev√¢ncia)
            - Indicando o n√≠vel de confian√ßa
            - Se n√£o encontrar, diga claramente "n√£o encontrado na base"
            
            N√ÉO invente informa√ß√µes. Use APENAS o que encontrar na busca.
            """,
            show_tool_calls=False
        )
        
        # Agente Jur√≠dico - Interpreta e valida
        self.juridico = Agent(
            name="Validador Jur√≠dico",
            model=OpenAIChat(id="gpt-4o"),
            description="""Advogado especialista em Direito Tribut√°rio Internacional.
            Interpreta e valida informa√ß√µes tribut√°rias.""",
            instructions="""
            Voc√™ √© um advogado especialista em Direito Tribut√°rio Internacional.
            
            MISS√ÉO: Interpretar informa√ß√µes tribut√°rias e fornecer an√°lise jur√≠dica.
            
            PROCESSO:
            1. Receba informa√ß√µes do pesquisador
            2. Valide a consist√™ncia jur√≠dica
            3. Interprete no contexto legal brasileiro
            4. Identifique riscos e oportunidades
            5. Forne√ßa orienta√ß√µes pr√°ticas
            
            FORMATO DE RESPOSTA:
            - Tom formal e profissional de advogado
            - Explica√ß√µes claras sobre conceitos jur√≠dicos
            - Alertas sobre mudan√ßas recentes na legisla√ß√£o
            - Recomenda√ß√µes pr√°ticas quando aplic√°vel
            
            SEMPRE considere:
            - Legisla√ß√£o brasileira como refer√™ncia
            - Tratados internacionais vigentes
            - Precedentes administrativos
            - Aspectos de compliance e transpar√™ncia
            """,
            show_tool_calls=False
        )
    
    def processar_consulta(self, pergunta: str) -> str:
        """Processa consulta com coordena√ß√£o de agentes"""
        
        print(f"üîç Processando: {pergunta}")
        print("=" * 50)
        
        # ETAPA 1: Pesquisar na base
        print("üìö ETAPA 1: Pesquisando na base de conhecimento...")
        
        # Extrair termos de busca
        termos_busca = []
        if "uruguai" in pergunta.lower():
            termos_busca.extend(["uruguai", "uruguay", "residencia fiscal uruguai"])
        if "residencia" in pergunta.lower() or "resid√™ncia" in pergunta.lower():
            termos_busca.extend(["residencia fiscal", "tax residence", "domicilio fiscal"])
        
        # Buscar m√∫ltiplas consultas
        todos_resultados = []
        for termo in termos_busca[:3]:  # Limitar a 3 buscas
            resultados = self.buscar_documentos(termo, n_results=3)
            todos_resultados.extend(resultados)
        
        # Remover duplicatas e pegar os melhores
        resultados_unicos = {}
        for r in todos_resultados:
            fonte = r['fonte']
            if fonte not in resultados_unicos or r['relevancia'] > resultados_unicos[fonte]['relevancia']:
                resultados_unicos[fonte] = r
        
        melhores_resultados = sorted(resultados_unicos.values(), key=lambda x: x['relevancia'], reverse=True)[:5]
        
        print(f"‚úÖ {len(melhores_resultados)} documentos relevantes encontrados")
        
        if not melhores_resultados:
            return "‚ùå N√£o foram encontrados documentos espec√≠ficos sobre esse tema na base de conhecimento."
        
        # ETAPA 2: Pesquisador analisa os resultados
        print("üî¨ ETAPA 2: Analisando informa√ß√µes encontradas...")
        
        contexto_pesquisa = f"""
        PERGUNTA: {pergunta}
        
        RESULTADOS ENCONTRADOS NA BASE:
        """
        
        for i, resultado in enumerate(melhores_resultados, 1):
            contexto_pesquisa += f"""
        
        {i}. FONTE: {resultado['fonte']} (Relev√¢ncia: {resultado['relevancia']})
        CONTE√öDO: {resultado['conteudo']}
        """
        
        contexto_pesquisa += """
        
        Com base EXCLUSIVAMENTE nestas informa√ß√µes encontradas na base, extraia e organize as informa√ß√µes espec√≠ficas que respondem √† pergunta. Cite sempre as fontes.
        """
        
        resposta_pesquisador = self.pesquisador.run(contexto_pesquisa)
        
        print("‚úÖ An√°lise do pesquisador conclu√≠da")
        
        # ETAPA 3: Valida√ß√£o jur√≠dica
        print("‚öñÔ∏è ETAPA 3: Valida√ß√£o e interpreta√ß√£o jur√≠dica...")
        
        contexto_juridico = f"""
        CONSULTA ORIGINAL: {pergunta}
        
        INFORMA√á√ïES ENCONTRADAS PELO PESQUISADOR:
        {resposta_pesquisador.content}
        
        Como advogado tributarista, interprete estas informa√ß√µes e forne√ßa uma resposta completa, profissional e juridicamente precisa. Mantenha o foco nas informa√ß√µes encontradas na base, mas adicione contexto jur√≠dico relevante.
        """
        
        resposta_final = self.juridico.run(contexto_juridico)
        
        print("‚úÖ Valida√ß√£o jur√≠dica conclu√≠da")
        print("üéØ RESPOSTA FINAL:")
        print("=" * 50)
        
        return resposta_final.content

def main():
    """Fun√ß√£o principal"""
    print("ü§ñ SISTEMA DE AGENTES TRIBUT√ÅRIOS AGNO")
    print("Especializado em Direito Tribut√°rio Internacional")
    print("Base: 4.317 chunks de documentos especializados")
    print()
    
    sistema = SistemaRealAgentes()
    
    # Pergunta espec√≠fica sobre Uruguai
    pergunta = "Como funciona a resid√™ncia fiscal no Uruguai?"
    
    resposta = sistema.processar_consulta(pergunta)
    
    print(resposta)
    print()
    print("="*60)
    print("üéâ SISTEMA FUNCIONANDO COM AGENTES REAIS!")
    print("üìä Base de dados: ChromaDB com documentos processados")
    print("ü§ñ Agentes: Pesquisador RAG + Validador Jur√≠dico")
    print("üß† IA: Claude Sonnet 3.5 (Anthropic)")

if __name__ == "__main__":
    main()